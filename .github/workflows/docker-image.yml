name: Create and push Docker images

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  build-appserver:
    runs-on: ubuntu-latest
    outputs:
      VERSION_APPSERVER: ${{ steps.extract_version.outputs.VERSION_APPSERVER }}
      SKIP_APPSERVER_BUILD: ${{ steps.check_image.outputs.SKIP_APPSERVER_BUILD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Version from package.json
        id: extract_version
        run: |
          VERSION_APPSERVER=$(jq -r .version app-server/package.json)
          echo "VERSION_APPSERVER=$VERSION_APPSERVER" >> $GITHUB_ENV
          echo "Current detected version of appserver: $VERSION_APPSERVER"

      - name: Authenticate and check if image already exists
        id: check_image
        run: |
          TOKEN=$(curl -s -X POST -H "Content-Type: application/json" \
            -d '{"username": "${{ secrets.DOCKER_USERNAME }}", "password": "${{ secrets.DOCKER_PASSWORD }}"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $TOKEN" \
            https://hub.docker.com/v2/repositories/p89u7/secinsidermonitor/tags/appserver-${VERSION_APPSERVER}/)

          if [ "$STATUS" -eq 200 ]; then
            echo "SKIP_APPSERVER_BUILD=true" >> $GITHUB_ENV
            echo "Image on Docker Hub already up to date."
          else
            echo "SKIP_APPSERVER_BUILD=false" >> $GITHUB_ENV
            echo "Image on Docker Hub not up to date, proceeding with build."
          fi

      - name: Build and Push Docker Image
        if: env.SKIP_APPSERVER_BUILD == 'false'
        run: |
          docker build -t secinsidermonitor:appserver-${VERSION_APPSERVER} -f app-server/Dockerfile .
          docker tag secinsidermonitor:appserver-${VERSION_APPSERVER} p89u7/secinsidermonitor:appserver-${VERSION_APPSERVER}
          docker tag secinsidermonitor:appserver-${VERSION_APPSERVER} p89u7/secinsidermonitor:appserver-latest
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push p89u7/secinsidermonitor:appserver-${VERSION_APPSERVER}
          docker push p89u7/secinsidermonitor:appserver-latest

  build-datafetcher:
    runs-on: ubuntu-latest
    outputs:
      VERSION_DATAFETCHER: ${{ steps.extract_version.outputs.VERSION_DATAFETCHER }}
      SKIP_DATAFETCHER_BUILD: ${{ steps.check_image.outputs.SKIP_DATAFETCHER_BUILD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Version from package.json
        id: extract_version
        run: |
          VERSION_DATAFETCHER=$(jq -r .version data-fetcher/package.json)
          echo "VERSION_DATAFETCHER=$VERSION_DATAFETCHER" >> $GITHUB_ENV
          echo "Current detected version of datafetcher: $VERSION_DATAFETCHER"

      - name: Authenticate and check if image already exists
        id: check_image
        run: |
          TOKEN=$(curl -s -X POST -H "Content-Type: application/json" \
            -d '{"username": "${{ secrets.DOCKER_USERNAME }}", "password": "${{ secrets.DOCKER_PASSWORD }}"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $TOKEN" \
            https://hub.docker.com/v2/repositories/p89u7/secinsidermonitor/tags/datafetcher-${VERSION_DATAFETCHER}/)

          if [ "$STATUS" -eq 200 ]; then
            echo "SKIP_DATAFETCHER_BUILD=true" >> $GITHUB_ENV
            echo "Image on Docker Hub already up to date."
          else
            echo "SKIP_DATAFETCHER_BUILD=false" >> $GITHUB_ENV
            echo "Image on Docker Hub not up to date, proceeding with build."
          fi

      - name: Build and Push Docker Image
        if: env.SKIP_DATAFETCHER_BUILD == 'false'
        run: |
          docker build -t secinsidermonitor:datafetcher-${VERSION_DATAFETCHER} -f data-fetcher/Dockerfile .
          docker tag secinsidermonitor:datafetcher-${VERSION_DATAFETCHER} p89u7/secinsidermonitor:datafetcher-${VERSION_DATAFETCHER}
          docker tag secinsidermonitor:datafetcher-${VERSION_DATAFETCHER} p89u7/secinsidermonitor:datafetcher-latest
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push p89u7/secinsidermonitor:datafetcher-${VERSION_DATAFETCHER}
          docker push p89u7/secinsidermonitor:datafetcher-latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build-appserver, build-datafetcher]
    if: needs.build-appserver.outputs.SKIP_APPSERVER_BUILD == 'false' || needs.build-datafetcher.outputs.SKIP_DATAFETCHER_BUILD == 'false'
    steps:
      - name: Showing pre CD status
        run: echo "Logging in to sim server, pulling docker images and refresh containers"

      - name: SSH into server and update
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SIM_SERVER_IP }}
          username: ${{ secrets.SIM_SERVER_USER }}
          key: ${{ secrets.SIM_SERVER_SSH_KEY }}
          script: |
            docker pull p89u7/secinsidermonitor:appserver-latest
            docker pull p89u7/secinsidermonitor:datafetcher-latest
            docker compose -f /opt/secinsidermonitor/docker-compose.yml up -d
