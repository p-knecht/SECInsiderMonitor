name: secinsidermonitor
services:
  database:
    image: mongo
    container_name: sim-database
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      SIM_DB: ${DB_SIM_DB}
      SIM_USER: ${DB_SIM_USERNAME}
      SIM_PASSWORD: ${DB_SIM_PASSWORD}
    command: ['mongod', '--replSet', 'rs0', '--keyFile', '/data/db/mongo-keyfile']
    entrypoint:
      - bash
      - -c
      - |
        if [ -f /data/db/initiate-replica-set.sh ]; then
        mv /data/db/initiate-replica-set.sh /data/db/initiate-replica-set.sh_executed
        /data/db/initiate-replica-set.sh_executed &
        fi
        exec docker-entrypoint.sh $$@
    volumes:
      - database:/data/db
      - database-config:/data/configdb
      - ./sim-database-init.sh:/docker-entrypoint-initdb.d/init.sh:ro

  datafetcher:
    image: p89u7/secinsidermonitor:datafetcher-latest
    container_name: sim-datafetcher
    restart: always
    environment:
      DATABASE_URL: mongodb://${DB_SIM_USERNAME}:${DB_SIM_PASSWORD}@sim-database:27017/${DB_SIM_DB}?authSource=admin
      USER_AGENT: ${USER_AGENT}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USE_SSL: ${SMTP_USE_SSL}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM_NAME: ${SMTP_FROM_NAME}
      SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS}
    volumes:
      - logs:/usr/src/app/data-fetcher/logs
      - database-lock:/usr/src/app/data-fetcher/dblock

  appserver:
    image: p89u7/secinsidermonitor:appserver-latest
    container_name: sim-appserver
    restart: always
    environment:
      DATABASE_URL: mongodb://${DB_SIM_USERNAME}:${DB_SIM_PASSWORD}@sim-database:27017/${DB_SIM_DB}?authSource=admin
      SERVER_FQDN: ${SERVER_FQDN}
      SERVER_DISABLE_REGISTRATION: ${SERVER_DISABLE_REGISTRATION}
      AUTH_URL: https://${SERVER_FQDN}
      AUTH_TRUST_HOST: true
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USE_SSL: ${SMTP_USE_SSL}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM_NAME: ${SMTP_FROM_NAME}
      SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.appserver.rule=Host(`${SERVER_FQDN}`)
      - traefik.http.routers.appserver.entrypoints=websecure
      - traefik.http.services.appserver.loadbalancer.server.port=3000
    volumes:
      - logs:/usr/src/app/app-server/logs:ro
      - appserver-config:/usr/src/app/app-server/config
      - database-lock:/usr/src/app/app-server/dblock

  reverseproxy:
    image: traefik
    container_name: sim-reverseproxy
    restart: always
    command:
      # only expose explicitly defined docker containers
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false

      # catch :80/HTTP requests and redirect to :443/HTTPS
      - --entryPoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entryPoints.web.http.redirections.entrypoint.scheme=https

      # define HTTPS entrypoint with automatic letsencrypt certifcate request/renewal
      - --entryPoints.websecure.address=:443
      - --entrypoints.websecure.asDefault=true
      - --entrypoints.websecure.http.tls.certresolver=resolver
      - --certificatesresolvers.resolver.acme.email=${SERVER_ACME_MAIL}
      - --certificatesresolvers.resolver.acme.tlschallenge=true
      - --certificatesresolvers.resolver.acme.storage=/letsencrypt/acme.json
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certificateStore:/letsencrypt

volumes:
  database:
  database-config:
  appserver-config:
  database-lock:
  certificateStore:
  logs:
